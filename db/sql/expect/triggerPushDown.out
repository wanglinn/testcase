-- testcase 1
CREATE TABLE transition_table_base (id int PRIMARY KEY, id2 int);
CREATE TABLE
INSERT INTO transition_table_base VALUES (1, 1);
INSERT 0 1
INSERT INTO transition_table_base VALUES (2, 2);
INSERT 0 1
INSERT INTO transition_table_base VALUES (3, 2);
INSERT 0 1
CREATE OR REPLACE FUNCTION transition_table_base_upd_func()
  RETURNS trigger
  LANGUAGE plpgsql
AS $$
DECLARE
  t text;
  l text;
BEGIN
  t = '';
  FOR l IN EXECUTE
           $q$
             SELECT id2 FROM oldtable;
           $q$ LOOP
    t = t || l || E'\n';
  END LOOP;

  RAISE INFO '%', t;
  RETURN new;
END;
$$;
CREATE FUNCTION
explain verbose delete from transition_table_base where id=1;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_FQS_QUERY__"  (cost=0.00..0.00 rows=0 width=0)
   Primary node/s: dn1
   Node/s: dn1
   Remote query: DELETE FROM public.transition_table_base transition_table_base WHERE (id = 1)
(4 rows)

-- after delete oldtable
CREATE TRIGGER transition_table_base_upd_trig
  AFTER DELETE ON transition_table_base 
  REFERENCING OLD TABLE AS oldtable
  FOR EACH STATEMENT
  EXECUTE PROCEDURE transition_table_base_upd_func();
CREATE TRIGGER
 explain verbose delete from transition_table_base where id=1;
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Delete on public.transition_table_base  (cost=0.00..2049.65 rows=1 width=46)
   Primary node/s: dn1
   Node/s: dn1, dn2
   Remote query: DELETE FROM ONLY public.transition_table_base transition_table_base WHERE ((transition_table_base.ctid = $1) AND (transition_table_base.xc_node_id = $2))
   ->  Data Node Scan on transition_table_base "_REMOTE_TABLE_QUERY_"  (cost=0.00..2049.65 rows=1 width=46)
         Output: transition_table_base.id, transition_table_base.ctid, transition_table_base.xc_node_id, transition_table_base.*
         Primary node/s: dn1
         Node/s: dn1
         Remote query: SELECT id, ctid, xc_node_id, transition_table_base.*::public.transition_table_base FROM ONLY public.transition_table_base transition_table_base WHERE (id = 1)
(9 rows)

 
 delete from transition_table_base where id=1;
psql:triggerPushDown.sql:40: INFO:  1

DELETE 1
  
 drop table transition_table_base  cascade;
DROP TABLE
 drop function transition_table_base_upd_func();
DROP FUNCTION
 
 
 -- testcase 2
 
CREATE TABLE transition_table_base (id int PRIMARY KEY, id2 int);
CREATE TABLE
INSERT INTO transition_table_base VALUES (1, 1);
INSERT 0 1
INSERT INTO transition_table_base VALUES (2, 2);
INSERT 0 1
INSERT INTO transition_table_base VALUES (3, 2);
INSERT 0 1
CREATE OR REPLACE FUNCTION transition_table_base_upd_func()
  RETURNS trigger
  LANGUAGE plpgsql
AS $$
DECLARE
  t text;
  l text;
BEGIN
  t = '';
  FOR l IN EXECUTE
           $q$
             SELECT id2 FROM oldtable;
           $q$ LOOP
    t = t || l || E'\n';
  END LOOP;

  RAISE INFO '%', t;
  RETURN new;
END;
$$;
CREATE FUNCTION
explain verbose update transition_table_base  set id2=3 where id2=3;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_FQS_QUERY__"  (cost=0.00..0.00 rows=0 width=0)
   Output: 3
   Primary node/s: dn1
   Node/s: dn1, dn2
   Remote query: UPDATE public.transition_table_base transition_table_base SET id2 = 3 WHERE (id2 = 3)
(5 rows)

-- after update oldtable
CREATE TRIGGER transition_table_base_upd_trig
  AFTER UPDATE ON transition_table_base 
  REFERENCING OLD TABLE AS oldtable
  FOR EACH STATEMENT
  EXECUTE PROCEDURE transition_table_base_upd_func();
CREATE TRIGGER
 explain verbose update transition_table_base  set id2=3 where id2=3;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Update on public.transition_table_base  (cost=0.00..2049.76 rows=11 width=54)
   Primary node/s: dn1
   Node/s: dn1, dn2
   Node expr: transition_table_base.id
   Remote query: UPDATE ONLY public.transition_table_base transition_table_base SET id = $1, id2 = $2 WHERE ((transition_table_base.ctid = $3) AND (transition_table_base.xc_node_id = $4))
   ->  Result  (cost=0.00..2049.76 rows=11 width=54)
         Output: transition_table_base.id, 3, transition_table_base.id2, transition_table_base.ctid, transition_table_base.xc_node_id, transition_table_base.*
         ->  Data Node Scan on transition_table_base "_REMOTE_TABLE_QUERY_"  (cost=0.00..2049.65 rows=11 width=50)
               Output: transition_table_base.id, transition_table_base.id2, transition_table_base.ctid, transition_table_base.xc_node_id, transition_table_base.*
               Primary node/s: dn1
               Node/s: dn1, dn2
               Remote query: SELECT id, id2, ctid, xc_node_id, transition_table_base.*::public.transition_table_base FROM ONLY public.transition_table_base transition_table_base WHERE (id2 = 3)
(12 rows)

 
  update transition_table_base  set id2=3 where id2=3;
psql:triggerPushDown.sql:86: INFO:  
UPDATE 0
 
 drop table transition_table_base  cascade;
DROP TABLE
 drop function transition_table_base_upd_func();
DROP FUNCTION
 
 
 -- testcase 3
CREATE TABLE transition_table_base (id int PRIMARY KEY, id2 int);
CREATE TABLE
INSERT INTO transition_table_base VALUES (1, 1);
INSERT 0 1
INSERT INTO transition_table_base VALUES (2, 2);
INSERT 0 1
INSERT INTO transition_table_base VALUES (3, 2);
INSERT 0 1
CREATE OR REPLACE FUNCTION transition_table_base_upd_func()
  RETURNS trigger
  LANGUAGE plpgsql
AS $$
DECLARE
  t text;
  l text;
BEGIN
  t = '';
  FOR l IN EXECUTE
           $q$
             SELECT id2 FROM newtable;
           $q$ LOOP
    t = t || l || E'\n';
  END LOOP;

  RAISE INFO '%', t;
  RETURN new;
END;
$$;
CREATE FUNCTION
explain verbose insert into transition_table_base  values(5,5);
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_FQS_QUERY__"  (cost=0.00..0.00 rows=0 width=0)
   Output: 5, 5
   Node expr: 5
   Remote query: INSERT INTO public.transition_table_base AS transition_table_base (id, id2) VALUES (5, 5)
(4 rows)

-- after insert newtable
CREATE TRIGGER transition_table_base_upd_trig
  AFTER INSERT ON transition_table_base 
  REFERENCING NEW TABLE AS newtable
  FOR EACH STATEMENT
  EXECUTE PROCEDURE transition_table_base_upd_func();
CREATE TRIGGER
 explain verbose insert into transition_table_base  values(5,5);
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Insert on public.transition_table_base  (cost=0.00..0.01 rows=1 width=8)
   Primary node/s: dn1
   Node/s: dn1, dn2
   Node expr: transition_table_base.id
   Remote query: INSERT INTO public.transition_table_base AS transition_table_base (id, id2) VALUES ($1, $2)
   ->  Result  (cost=0.00..0.01 rows=1 width=8)
         Output: 5, 5
(7 rows)

 
insert into transition_table_base  values(5,5);
psql:triggerPushDown.sql:131: INFO:  5

INSERT 0 1
  
 drop table transition_table_base  cascade;
DROP TABLE
 drop function transition_table_base_upd_func();
DROP FUNCTION
 
 
 -- testcase 4
 
CREATE TABLE transition_table_base (id int PRIMARY KEY, id2 int);
CREATE TABLE
INSERT INTO transition_table_base VALUES (1, 1);
INSERT 0 1
INSERT INTO transition_table_base VALUES (2, 2);
INSERT 0 1
INSERT INTO transition_table_base VALUES (3, 2);
INSERT 0 1
CREATE OR REPLACE FUNCTION transition_table_base_upd_func()
  RETURNS trigger
  LANGUAGE plpgsql
AS $$
DECLARE
  t text;
  l text;
BEGIN
  t = '';
  FOR l IN EXECUTE
           $q$
             SELECT id2 FROM newtable;
           $q$ LOOP
    t = t || l || E'\n';
  END LOOP;

  RAISE INFO '%', t;
  RETURN new;
END;
$$;
CREATE FUNCTION
explain verbose update transition_table_base  set id2=3 where id2=3;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_FQS_QUERY__"  (cost=0.00..0.00 rows=0 width=0)
   Output: 3
   Primary node/s: dn1
   Node/s: dn1, dn2
   Remote query: UPDATE public.transition_table_base transition_table_base SET id2 = 3 WHERE (id2 = 3)
(5 rows)

-- after update newtable
CREATE TRIGGER transition_table_base_upd_trig
  AFTER UPDATE ON transition_table_base 
  REFERENCING NEW TABLE AS newtable
  FOR EACH STATEMENT
  EXECUTE PROCEDURE transition_table_base_upd_func();
CREATE TRIGGER
 explain verbose update transition_table_base  set id2=3 where id2=3;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Update on public.transition_table_base  (cost=0.00..2049.76 rows=11 width=54)
   Primary node/s: dn1
   Node/s: dn1, dn2
   Node expr: transition_table_base.id
   Remote query: UPDATE ONLY public.transition_table_base transition_table_base SET id = $1, id2 = $2 WHERE ((transition_table_base.ctid = $3) AND (transition_table_base.xc_node_id = $4))
   ->  Result  (cost=0.00..2049.76 rows=11 width=54)
         Output: transition_table_base.id, 3, transition_table_base.id2, transition_table_base.ctid, transition_table_base.xc_node_id, transition_table_base.*
         ->  Data Node Scan on transition_table_base "_REMOTE_TABLE_QUERY_"  (cost=0.00..2049.65 rows=11 width=50)
               Output: transition_table_base.id, transition_table_base.id2, transition_table_base.ctid, transition_table_base.xc_node_id, transition_table_base.*
               Primary node/s: dn1
               Node/s: dn1, dn2
               Remote query: SELECT id, id2, ctid, xc_node_id, transition_table_base.*::public.transition_table_base FROM ONLY public.transition_table_base transition_table_base WHERE (id2 = 3)
(12 rows)

 
  update transition_table_base  set id2=3 where id2=3;
psql:triggerPushDown.sql:177: INFO:  
UPDATE 0
 
 drop table transition_table_base  cascade;
DROP TABLE
 drop function transition_table_base_upd_func();
DROP FUNCTION
 
